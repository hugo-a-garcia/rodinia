// automatically generated by Xtext
grammar be.kuleuven.rodinia.dsl.rtt.RttDsl with org.eclipse.xtext.common.Terminals

import "be.kueleuven.rodinia.model.rtt" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.kuleuven.be/rodinia/dsl/datatypes/Datatypes" as datatypes

OrocosPackage returns OrocosPackage:
	{OrocosPackage}
	'OrocosPackage'
	name=EString
	'{'
		('taskContexts' '{' taskContexts+=TaskContext ( "," taskContexts+=TaskContext)* '}' )?
		('connectionPolicies' '{' connectionPolicies+=ConnectionPolicy ( "," connectionPolicies+=ConnectionPolicy)* '}' )?
		('peerGroups' '{' peerGroups+=PeerGroup ( "," peerGroups+=PeerGroup)* '}' )?
	'}';

AbstractInputPort returns AbstractInputPort:
	InputPort| EventPort;

EString returns ecore::EString:
	STRING | ID;

TaskContext returns TaskContext:
	'TaskContext'
	name=EString
	'{'
		'namespace' namespace=EString
		'type' type=EString
		('activity' activity=Activity)?
		('inputPorts' '{' inputPorts+=AbstractInputPort ( "," inputPorts+=AbstractInputPort)* '}' )?
		('outputPorts' '{' outputPorts+=OutputPort ( "," outputPorts+=OutputPort)* '}' )?
		('properties' '{' properties+=Property ( "," properties+=Property)* '}' )?
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
	'}';

ConnectionPolicy returns ConnectionPolicy:
	
	'ConnectionPolicy'
	name=EString
	'{'
		'inputPort' inputPort=[AbstractInputPort|EString]
		'outputPort' outputPort=[OutputPort|EString]
		('bufferSize' bufferSize=EShort)?
		('dataSize' dataSize=EShort)?
		('lockPolicy' lockPolicy=ConnectionPolicyLockPolicy)?
		('transport' transport=ConnectionPolicyTransport)?
		('type' type=ConnectionPolicyType)?
		(init?='init')?
		(pull?='pull')?
		
	'}';

PeerGroup returns PeerGroup:
	'PeerGroup'
	name=EString
	'{'
		'coordinator' coordinator=[TaskContext|EString]
		('members' '(' members+=[TaskContext|EString] ( "," members+=[TaskContext|EString])* ')' )?
	'}';

Activity returns Activity:
	{Activity}
	'Activity'
	name=EString
	'{'
		('scheduler' scheduler=Scheduler)?
		('cpuAffinity' cpuAffinity=EString)?
		('period' period=EFloat)?
		('priority' priority=EInt)?
		('taskContext' taskContext=[TaskContext|EString])?
		('slave' '{' slave+=Slave ( "," slave+=Slave)* '}' )?
	'}';

InputPort returns InputPort:
	{InputPort}
	'InputPort'
	name=EString
	'{'
		('dataType' dataType=[datatypes::DataType|QualifiedNameWithDot])?
	'}';

EventPort returns EventPort:
	{EventPort}
	'EventPort'
	name=EString
	'{'
		('dataType' dataType=[datatypes::DataType|QualifiedNameWithDot])?
	'}';

OutputPort returns OutputPort:
	{OutputPort}
	'OutputPort'
	name=EString
	'{'
		('dataType' dataType=[datatypes::DataType|QualifiedNameWithDot])?
	'}';

Property returns Property:
	{Property}
	'Property'
	name=EString
	'{'
		('variable' variable=QualifiedNameWithDot)?
		('type' type=[datatypes::DataType|QualifiedNameWithDot])?
		('documentation' documentation=EString)?
	'}';

Operation returns Operation:
	{Operation}
	'Operation'
	name=EString
		'{'
		('executionType' executionType=ExecutionType)?
		('returnType' returnType=[datatypes::DataType|QualifiedNameWithDot])?
		('arguments' '(' arguments+=OperationArgument (',' arguments+=OperationArgument)* ')')?
		('documentation' documentation=EString)?
	'}'; 
	
OperationArgument returns OperationArgument:
	{OperationArgument}
	'OperationArgument'
	name=EString
	'{'
		('type' type=[datatypes::DataType|QualifiedNameWithDot])?
	'}';

enum ExecutionType returns ExecutionType:
	ClientThread | 	OwnThread;

Slave returns Slave:
	{Slave}
	'Slave'
	name=EString
	'{'
		('taskContext' taskContext=[TaskContext|EString])?
	'}';

enum Scheduler returns Scheduler:
	ORO_SCHED_OTHER | ORO_SCHED_RT
;

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

EInt returns ecore::EInt:
	'-'? INT;

EShort returns ecore::EShort:
	'-'? INT;

enum ConnectionPolicyLockPolicy returns ConnectionPolicyLockPolicy:
	UNSYNC | LOCKED | LOCK_FREE;

enum ConnectionPolicyType returns ConnectionPolicyType:
	DATA | BUFFER | CIRCULAR_BUFFER;
	
enum ConnectionPolicyTransport returns ConnectionPolicyTransport:
	default | CORBA | MQUEUE | ROS
;

QualifiedName:
  ID ('::' ID)*
;

QualifiedNameWithDot:
  QualifiedName ('.' ID)*
;
