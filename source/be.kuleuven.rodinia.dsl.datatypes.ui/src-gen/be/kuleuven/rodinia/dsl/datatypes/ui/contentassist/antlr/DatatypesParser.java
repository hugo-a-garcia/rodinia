/*
* generated by Xtext
*/
package be.kuleuven.rodinia.dsl.datatypes.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import be.kuleuven.rodinia.dsl.datatypes.services.DatatypesGrammarAccess;

public class DatatypesParser extends AbstractContentAssistParser {
	
	@Inject
	private DatatypesGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected be.kuleuven.rodinia.dsl.datatypes.ui.contentassist.antlr.internal.InternalDatatypesParser createParser() {
		be.kuleuven.rodinia.dsl.datatypes.ui.contentassist.antlr.internal.InternalDatatypesParser result = new be.kuleuven.rodinia.dsl.datatypes.ui.contentassist.antlr.internal.InternalDatatypesParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAbstractElementAccess().getAlternatives(), "rule__AbstractElement__Alternatives");
					put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
					put(grammarAccess.getDataTypeLibraryAccess().getGroup(), "rule__DataTypeLibrary__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getSimpleTypeAccess().getGroup(), "rule__SimpleType__Group__0");
					put(grammarAccess.getCustomTypeAccess().getGroup(), "rule__CustomType__Group__0");
					put(grammarAccess.getCustomTypeAccess().getGroup_2(), "rule__CustomType__Group_2__0");
					put(grammarAccess.getCustomTypeAccess().getGroup_3(), "rule__CustomType__Group_3__0");
					put(grammarAccess.getCustomTypeAccess().getGroup_3_3(), "rule__CustomType__Group_3_3__0");
					put(grammarAccess.getFieldAccess().getGroup(), "rule__Field__Group__0");
					put(grammarAccess.getDomainmodelAccess().getElementsAssignment(), "rule__Domainmodel__ElementsAssignment");
					put(grammarAccess.getDataTypeLibraryAccess().getNameAssignment_1(), "rule__DataTypeLibrary__NameAssignment_1");
					put(grammarAccess.getDataTypeLibraryAccess().getElementsAssignment_3(), "rule__DataTypeLibrary__ElementsAssignment_3");
					put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
					put(grammarAccess.getSimpleTypeAccess().getNameAssignment_1(), "rule__SimpleType__NameAssignment_1");
					put(grammarAccess.getCustomTypeAccess().getNameAssignment_1(), "rule__CustomType__NameAssignment_1");
					put(grammarAccess.getCustomTypeAccess().getSuperTypeAssignment_2_1(), "rule__CustomType__SuperTypeAssignment_2_1");
					put(grammarAccess.getCustomTypeAccess().getFieldsAssignment_3_2(), "rule__CustomType__FieldsAssignment_3_2");
					put(grammarAccess.getCustomTypeAccess().getFieldsAssignment_3_3_1(), "rule__CustomType__FieldsAssignment_3_3_1");
					put(grammarAccess.getFieldAccess().getManyAssignment_0(), "rule__Field__ManyAssignment_0");
					put(grammarAccess.getFieldAccess().getNameAssignment_1(), "rule__Field__NameAssignment_1");
					put(grammarAccess.getFieldAccess().getTypeAssignment_3(), "rule__Field__TypeAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			be.kuleuven.rodinia.dsl.datatypes.ui.contentassist.antlr.internal.InternalDatatypesParser typedParser = (be.kuleuven.rodinia.dsl.datatypes.ui.contentassist.antlr.internal.InternalDatatypesParser) parser;
			typedParser.entryRuleDomainmodel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DatatypesGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DatatypesGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
