/*
* generated by Xtext
*/
grammar InternalDatatypes;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package be.kuleuven.rodinia.dsl.datatypes.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package be.kuleuven.rodinia.dsl.datatypes.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import be.kuleuven.rodinia.dsl.datatypes.services.DatatypesGrammarAccess;

}

@parser::members {
 
 	private DatatypesGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DatatypesGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleDomainmodel
entryRuleDomainmodel 
:
{ before(grammarAccess.getDomainmodelRule()); }
	 ruleDomainmodel
{ after(grammarAccess.getDomainmodelRule()); } 
	 EOF 
;

// Rule Domainmodel
ruleDomainmodel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDomainmodelAccess().getElementsAssignment()); }
(rule__Domainmodel__ElementsAssignment)*
{ after(grammarAccess.getDomainmodelAccess().getElementsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedName
entryRuleQualifiedName 
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
(rule__QualifiedName__Group__0)
{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard 
:
{ before(grammarAccess.getQualifiedNameWithWildcardRule()); }
	 ruleQualifiedNameWithWildcard
{ after(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
(rule__QualifiedNameWithWildcard__Group__0)
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAbstractElement
entryRuleAbstractElement 
:
{ before(grammarAccess.getAbstractElementRule()); }
	 ruleAbstractElement
{ after(grammarAccess.getAbstractElementRule()); } 
	 EOF 
;

// Rule AbstractElement
ruleAbstractElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAbstractElementAccess().getAlternatives()); }
(rule__AbstractElement__Alternatives)
{ after(grammarAccess.getAbstractElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDataTypeLibrary
entryRuleDataTypeLibrary 
:
{ before(grammarAccess.getDataTypeLibraryRule()); }
	 ruleDataTypeLibrary
{ after(grammarAccess.getDataTypeLibraryRule()); } 
	 EOF 
;

// Rule DataTypeLibrary
ruleDataTypeLibrary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDataTypeLibraryAccess().getGroup()); }
(rule__DataTypeLibrary__Group__0)
{ after(grammarAccess.getDataTypeLibraryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleImport
entryRuleImport 
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImportAccess().getGroup()); }
(rule__Import__Group__0)
{ after(grammarAccess.getImportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDataType
entryRuleDataType 
:
{ before(grammarAccess.getDataTypeRule()); }
	 ruleDataType
{ after(grammarAccess.getDataTypeRule()); } 
	 EOF 
;

// Rule DataType
ruleDataType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDataTypeAccess().getAlternatives()); }
(rule__DataType__Alternatives)
{ after(grammarAccess.getDataTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleType
entryRuleSimpleType 
:
{ before(grammarAccess.getSimpleTypeRule()); }
	 ruleSimpleType
{ after(grammarAccess.getSimpleTypeRule()); } 
	 EOF 
;

// Rule SimpleType
ruleSimpleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleTypeAccess().getGroup()); }
(rule__SimpleType__Group__0)
{ after(grammarAccess.getSimpleTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCustomType
entryRuleCustomType 
:
{ before(grammarAccess.getCustomTypeRule()); }
	 ruleCustomType
{ after(grammarAccess.getCustomTypeRule()); } 
	 EOF 
;

// Rule CustomType
ruleCustomType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCustomTypeAccess().getGroup()); }
(rule__CustomType__Group__0)
{ after(grammarAccess.getCustomTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleField
entryRuleField 
:
{ before(grammarAccess.getFieldRule()); }
	 ruleField
{ after(grammarAccess.getFieldRule()); } 
	 EOF 
;

// Rule Field
ruleField
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFieldAccess().getGroup()); }
(rule__Field__Group__0)
{ after(grammarAccess.getFieldAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__AbstractElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAbstractElementAccess().getDataTypeLibraryParserRuleCall_0()); }
	ruleDataTypeLibrary
{ after(grammarAccess.getAbstractElementAccess().getDataTypeLibraryParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAbstractElementAccess().getDataTypeParserRuleCall_1()); }
	ruleDataType
{ after(grammarAccess.getAbstractElementAccess().getDataTypeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAbstractElementAccess().getImportParserRuleCall_2()); }
	ruleImport
{ after(grammarAccess.getAbstractElementAccess().getImportParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeAccess().getSimpleTypeParserRuleCall_0()); }
	ruleSimpleType
{ after(grammarAccess.getDataTypeAccess().getSimpleTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDataTypeAccess().getCustomTypeParserRuleCall_1()); }
	ruleCustomType
{ after(grammarAccess.getDataTypeAccess().getCustomTypeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__QualifiedName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
(rule__QualifiedName__Group_1__0)*
{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__QualifiedNameWithWildcard__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group__0__Impl
	rule__QualifiedNameWithWildcard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildcard__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNameWithWildcard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); }
(
	'.*' 
)?
{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataTypeLibrary__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeLibrary__Group__0__Impl
	rule__DataTypeLibrary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeLibrary__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeLibraryAccess().getDataTypeLibraryKeyword_0()); }

	'DataTypeLibrary' 

{ after(grammarAccess.getDataTypeLibraryAccess().getDataTypeLibraryKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeLibrary__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeLibrary__Group__1__Impl
	rule__DataTypeLibrary__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeLibrary__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeLibraryAccess().getNameAssignment_1()); }
(rule__DataTypeLibrary__NameAssignment_1)
{ after(grammarAccess.getDataTypeLibraryAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeLibrary__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeLibrary__Group__2__Impl
	rule__DataTypeLibrary__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeLibrary__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeLibraryAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getDataTypeLibraryAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeLibrary__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeLibrary__Group__3__Impl
	rule__DataTypeLibrary__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeLibrary__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeLibraryAccess().getElementsAssignment_3()); }
(rule__DataTypeLibrary__ElementsAssignment_3)*
{ after(grammarAccess.getDataTypeLibraryAccess().getElementsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataTypeLibrary__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataTypeLibrary__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeLibrary__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeLibraryAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getDataTypeLibraryAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Import__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }

	'import' 

{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
(rule__Import__ImportedNamespaceAssignment_1)
{ after(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimpleType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleType__Group__0__Impl
	rule__SimpleType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeAccess().getSimpleTypeKeyword_0()); }

	'SimpleType' 

{ after(grammarAccess.getSimpleTypeAccess().getSimpleTypeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeAccess().getNameAssignment_1()); }
(rule__SimpleType__NameAssignment_1)
{ after(grammarAccess.getSimpleTypeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CustomType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomType__Group__0__Impl
	rule__CustomType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTypeAccess().getCustomTypeKeyword_0()); }

	'CustomType' 

{ after(grammarAccess.getCustomTypeAccess().getCustomTypeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CustomType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomType__Group__1__Impl
	rule__CustomType__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTypeAccess().getNameAssignment_1()); }
(rule__CustomType__NameAssignment_1)
{ after(grammarAccess.getCustomTypeAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CustomType__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomType__Group__2__Impl
	rule__CustomType__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomType__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTypeAccess().getGroup_2()); }
(rule__CustomType__Group_2__0)?
{ after(grammarAccess.getCustomTypeAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CustomType__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomType__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomType__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTypeAccess().getGroup_3()); }
(rule__CustomType__Group_3__0)?
{ after(grammarAccess.getCustomTypeAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__CustomType__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomType__Group_2__0__Impl
	rule__CustomType__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomType__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTypeAccess().getSuperTypeKeyword_2_0()); }

	'superType' 

{ after(grammarAccess.getCustomTypeAccess().getSuperTypeKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CustomType__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomType__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomType__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTypeAccess().getSuperTypeAssignment_2_1()); }
(rule__CustomType__SuperTypeAssignment_2_1)
{ after(grammarAccess.getCustomTypeAccess().getSuperTypeAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CustomType__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomType__Group_3__0__Impl
	rule__CustomType__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomType__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTypeAccess().getFieldsKeyword_3_0()); }

	'fields' 

{ after(grammarAccess.getCustomTypeAccess().getFieldsKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CustomType__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomType__Group_3__1__Impl
	rule__CustomType__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomType__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTypeAccess().getLeftCurlyBracketKeyword_3_1()); }

	'{' 

{ after(grammarAccess.getCustomTypeAccess().getLeftCurlyBracketKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CustomType__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomType__Group_3__2__Impl
	rule__CustomType__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomType__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTypeAccess().getFieldsAssignment_3_2()); }
(rule__CustomType__FieldsAssignment_3_2)
{ after(grammarAccess.getCustomTypeAccess().getFieldsAssignment_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CustomType__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomType__Group_3__3__Impl
	rule__CustomType__Group_3__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomType__Group_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTypeAccess().getGroup_3_3()); }
(rule__CustomType__Group_3_3__0)*
{ after(grammarAccess.getCustomTypeAccess().getGroup_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CustomType__Group_3__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomType__Group_3__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomType__Group_3__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTypeAccess().getRightCurlyBracketKeyword_3_4()); }

	'}' 

{ after(grammarAccess.getCustomTypeAccess().getRightCurlyBracketKeyword_3_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__CustomType__Group_3_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomType__Group_3_3__0__Impl
	rule__CustomType__Group_3_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomType__Group_3_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTypeAccess().getCommaKeyword_3_3_0()); }

	',' 

{ after(grammarAccess.getCustomTypeAccess().getCommaKeyword_3_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CustomType__Group_3_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CustomType__Group_3_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CustomType__Group_3_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTypeAccess().getFieldsAssignment_3_3_1()); }
(rule__CustomType__FieldsAssignment_3_3_1)
{ after(grammarAccess.getCustomTypeAccess().getFieldsAssignment_3_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Field__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__0__Impl
	rule__Field__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getManyAssignment_0()); }
(rule__Field__ManyAssignment_0)?
{ after(grammarAccess.getFieldAccess().getManyAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__1__Impl
	rule__Field__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getNameAssignment_1()); }
(rule__Field__NameAssignment_1)
{ after(grammarAccess.getFieldAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__2__Impl
	rule__Field__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getFieldAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Field__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getTypeAssignment_3()); }
(rule__Field__TypeAssignment_3)
{ after(grammarAccess.getFieldAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Domainmodel__ElementsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDomainmodelAccess().getElementsAbstractElementParserRuleCall_0()); }
	ruleAbstractElement{ after(grammarAccess.getDomainmodelAccess().getElementsAbstractElementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeLibrary__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeLibraryAccess().getNameQualifiedNameParserRuleCall_1_0()); }
	ruleQualifiedName{ after(grammarAccess.getDataTypeLibraryAccess().getNameQualifiedNameParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataTypeLibrary__ElementsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataTypeLibraryAccess().getElementsAbstractElementParserRuleCall_3_0()); }
	ruleAbstractElement{ after(grammarAccess.getDataTypeLibraryAccess().getElementsAbstractElementParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedNamespaceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
	ruleQualifiedNameWithWildcard{ after(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleType__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getSimpleTypeAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CustomType__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTypeAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getCustomTypeAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CustomType__SuperTypeAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTypeAccess().getSuperTypeCustomTypeCrossReference_2_1_0()); }
(
{ before(grammarAccess.getCustomTypeAccess().getSuperTypeCustomTypeQualifiedNameParserRuleCall_2_1_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getCustomTypeAccess().getSuperTypeCustomTypeQualifiedNameParserRuleCall_2_1_0_1()); }
)
{ after(grammarAccess.getCustomTypeAccess().getSuperTypeCustomTypeCrossReference_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CustomType__FieldsAssignment_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTypeAccess().getFieldsFieldParserRuleCall_3_2_0()); }
	ruleField{ after(grammarAccess.getCustomTypeAccess().getFieldsFieldParserRuleCall_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CustomType__FieldsAssignment_3_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCustomTypeAccess().getFieldsFieldParserRuleCall_3_3_1_0()); }
	ruleField{ after(grammarAccess.getCustomTypeAccess().getFieldsFieldParserRuleCall_3_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__ManyAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getManyManyKeyword_0_0()); }
(
{ before(grammarAccess.getFieldAccess().getManyManyKeyword_0_0()); }

	'many' 

{ after(grammarAccess.getFieldAccess().getManyManyKeyword_0_0()); }
)

{ after(grammarAccess.getFieldAccess().getManyManyKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getFieldAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Field__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldAccess().getTypeDataTypeCrossReference_3_0()); }
(
{ before(grammarAccess.getFieldAccess().getTypeDataTypeQualifiedNameParserRuleCall_3_0_1()); }
	ruleQualifiedName{ after(grammarAccess.getFieldAccess().getTypeDataTypeQualifiedNameParserRuleCall_3_0_1()); }
)
{ after(grammarAccess.getFieldAccess().getTypeDataTypeCrossReference_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


