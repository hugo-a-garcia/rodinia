/*
 * [%=taskContext.type%].hpp
 *
 */

#ifndef [%=taskContext.type.toUpperCase()%]_HPP_
#define [%=taskContext.type.toUpperCase()%]_HPP_

using namespace RTT;

namespace [%=taskContext.namespace%] 
{
	class [%=taskContext.type%]: public RTT::TaskContext
	{
[*
		[%for(anInputPort in taskContext.inputPorts) {%]

		Commented out for testing
		InputPort<[%=anInputPort.type%]> [%=anInputPort.name%];

		InputPort<int> [%=anInputPort.name%];
		[%}%]
		[%for(eventPort in taskContext.eventPorts) {%]

		Commented out for testing
		InputPort<[%=anInputPort.type%]> [%=anInputPort.name%];

		InputPort<int> [%=eventPort.name%];
		[%}%]
*]		[%for(anOutputPort in taskContext.outputPorts) {%]
[*
		Commented out for testing
		OutputPort<[%=anOutputPort.type%]> [%=anOutputPort.name%];
*]
		OutputPort<int> [%=anOutputPort.name%];
		// --> [%=anOutputPort.dataType.name%]  <--
		///////////////////////////////////////////
		[%}%]
		
		[%=out.startPreserve("/*", "*/", "declarations", true)%]
		[%=out.stopPreserve()%]
	
    public:
        [%=taskContext.type%](const std::string& name);
        
        bool configureHook();
        bool startHook();
        void updateHook();
        void stopHook();
        void cleanupHook();
[*  
        [%for(anOperation in taskContext.operacion) {%]
        [%=anOperation.returnType%] [%=anOperation.name%]();
        [%}%]
*]        
        [%=out.startPreserve("/*", "*/", "public", true)%]
        [%=out.stopPreserve()%]
        
    protected:
[*
    	[%for(aProperty in taskContext.property) {%]
    	[%=aProperty.name%] [%=aProperty.name%];
    	[%}%]
*]
    	[%=out.startPreserve("/*", "*/", "protected", true)%]
    	[%=out.stopPreserve()%]
    	
    private:
    	[%=out.startPreserve("/*", "*/", "private", true)%]
    	[%=out.stopPreserve()%]
    	
    };
}

#endif /* [%=taskContext.type.toUpperCase()%]_HPP_ */