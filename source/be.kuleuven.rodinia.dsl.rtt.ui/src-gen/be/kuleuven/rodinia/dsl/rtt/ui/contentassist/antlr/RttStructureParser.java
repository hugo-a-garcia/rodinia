/*
* generated by Xtext
*/
package be.kuleuven.rodinia.dsl.rtt.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import be.kuleuven.rodinia.dsl.rtt.services.RttStructureGrammarAccess;

public class RttStructureParser extends AbstractContentAssistParser {
	
	@Inject
	private RttStructureGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected be.kuleuven.rodinia.dsl.rtt.ui.contentassist.antlr.internal.InternalRttStructureParser createParser() {
		be.kuleuven.rodinia.dsl.rtt.ui.contentassist.antlr.internal.InternalRttStructureParser result = new be.kuleuven.rodinia.dsl.rtt.ui.contentassist.antlr.internal.InternalRttStructureParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getConnectionPolicyLockPolicyAccess().getAlternatives(), "rule__ConnectionPolicyLockPolicy__Alternatives");
					put(grammarAccess.getConnectionPolicyTypeAccess().getAlternatives(), "rule__ConnectionPolicyType__Alternatives");
					put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
					put(grammarAccess.getPackageAccess().getGroup_4(), "rule__Package__Group_4__0");
					put(grammarAccess.getPackageAccess().getGroup_4_3(), "rule__Package__Group_4_3__0");
					put(grammarAccess.getPackageAccess().getGroup_5(), "rule__Package__Group_5__0");
					put(grammarAccess.getPackageAccess().getGroup_5_3(), "rule__Package__Group_5_3__0");
					put(grammarAccess.getTaskContextAccess().getGroup(), "rule__TaskContext__Group__0");
					put(grammarAccess.getTaskContextAccess().getGroup_7(), "rule__TaskContext__Group_7__0");
					put(grammarAccess.getTaskContextAccess().getGroup_7_3(), "rule__TaskContext__Group_7_3__0");
					put(grammarAccess.getTaskContextAccess().getGroup_8(), "rule__TaskContext__Group_8__0");
					put(grammarAccess.getTaskContextAccess().getGroup_8_3(), "rule__TaskContext__Group_8_3__0");
					put(grammarAccess.getConnectionPolicyAccess().getGroup(), "rule__ConnectionPolicy__Group__0");
					put(grammarAccess.getConnectionPolicyAccess().getGroup_3(), "rule__ConnectionPolicy__Group_3__0");
					put(grammarAccess.getConnectionPolicyAccess().getGroup_4(), "rule__ConnectionPolicy__Group_4__0");
					put(grammarAccess.getConnectionPolicyAccess().getGroup_5(), "rule__ConnectionPolicy__Group_5__0");
					put(grammarAccess.getInputPortAccess().getGroup(), "rule__InputPort__Group__0");
					put(grammarAccess.getInputPortAccess().getGroup_4(), "rule__InputPort__Group_4__0");
					put(grammarAccess.getInputPortAccess().getGroup_5(), "rule__InputPort__Group_5__0");
					put(grammarAccess.getOutputPortAccess().getGroup(), "rule__OutputPort__Group__0");
					put(grammarAccess.getOutputPortAccess().getGroup_3(), "rule__OutputPort__Group_3__0");
					put(grammarAccess.getOutputPortAccess().getGroup_4(), "rule__OutputPort__Group_4__0");
					put(grammarAccess.getEShortAccess().getGroup(), "rule__EShort__Group__0");
					put(grammarAccess.getPackageAccess().getNameAssignment_2(), "rule__Package__NameAssignment_2");
					put(grammarAccess.getPackageAccess().getTaskContextsAssignment_4_2(), "rule__Package__TaskContextsAssignment_4_2");
					put(grammarAccess.getPackageAccess().getTaskContextsAssignment_4_3_1(), "rule__Package__TaskContextsAssignment_4_3_1");
					put(grammarAccess.getPackageAccess().getConnectionPoliciesAssignment_5_2(), "rule__Package__ConnectionPoliciesAssignment_5_2");
					put(grammarAccess.getPackageAccess().getConnectionPoliciesAssignment_5_3_1(), "rule__Package__ConnectionPoliciesAssignment_5_3_1");
					put(grammarAccess.getTaskContextAccess().getNameAssignment_1(), "rule__TaskContext__NameAssignment_1");
					put(grammarAccess.getTaskContextAccess().getNamespaceAssignment_4(), "rule__TaskContext__NamespaceAssignment_4");
					put(grammarAccess.getTaskContextAccess().getTypeAssignment_6(), "rule__TaskContext__TypeAssignment_6");
					put(grammarAccess.getTaskContextAccess().getInputPortsAssignment_7_2(), "rule__TaskContext__InputPortsAssignment_7_2");
					put(grammarAccess.getTaskContextAccess().getInputPortsAssignment_7_3_1(), "rule__TaskContext__InputPortsAssignment_7_3_1");
					put(grammarAccess.getTaskContextAccess().getOutputPortsAssignment_8_2(), "rule__TaskContext__OutputPortsAssignment_8_2");
					put(grammarAccess.getTaskContextAccess().getOutputPortsAssignment_8_3_1(), "rule__TaskContext__OutputPortsAssignment_8_3_1");
					put(grammarAccess.getConnectionPolicyAccess().getNameAssignment_1(), "rule__ConnectionPolicy__NameAssignment_1");
					put(grammarAccess.getConnectionPolicyAccess().getBufferSizeAssignment_3_1(), "rule__ConnectionPolicy__BufferSizeAssignment_3_1");
					put(grammarAccess.getConnectionPolicyAccess().getLockPolicyAssignment_4_1(), "rule__ConnectionPolicy__LockPolicyAssignment_4_1");
					put(grammarAccess.getConnectionPolicyAccess().getTypeAssignment_5_1(), "rule__ConnectionPolicy__TypeAssignment_5_1");
					put(grammarAccess.getConnectionPolicyAccess().getInputPortAssignment_7(), "rule__ConnectionPolicy__InputPortAssignment_7");
					put(grammarAccess.getConnectionPolicyAccess().getOutputPortAssignment_9(), "rule__ConnectionPolicy__OutputPortAssignment_9");
					put(grammarAccess.getInputPortAccess().getIsEventPortAssignment_0(), "rule__InputPort__IsEventPortAssignment_0");
					put(grammarAccess.getInputPortAccess().getNameAssignment_2(), "rule__InputPort__NameAssignment_2");
					put(grammarAccess.getInputPortAccess().getDataTypeAssignment_4_1(), "rule__InputPort__DataTypeAssignment_4_1");
					put(grammarAccess.getInputPortAccess().getInputConnectionPolicyAssignment_5_1(), "rule__InputPort__InputConnectionPolicyAssignment_5_1");
					put(grammarAccess.getOutputPortAccess().getNameAssignment_1(), "rule__OutputPort__NameAssignment_1");
					put(grammarAccess.getOutputPortAccess().getDataTypeAssignment_3_1(), "rule__OutputPort__DataTypeAssignment_3_1");
					put(grammarAccess.getOutputPortAccess().getOutputConnectionPolicyAssignment_4_1(), "rule__OutputPort__OutputConnectionPolicyAssignment_4_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			be.kuleuven.rodinia.dsl.rtt.ui.contentassist.antlr.internal.InternalRttStructureParser typedParser = (be.kuleuven.rodinia.dsl.rtt.ui.contentassist.antlr.internal.InternalRttStructureParser) parser;
			typedParser.entryRulePackage();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public RttStructureGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(RttStructureGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
